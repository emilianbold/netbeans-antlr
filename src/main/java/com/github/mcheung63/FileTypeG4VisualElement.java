package com.github.mcheung63;

import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Set;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.text.JTextComponent;
import org.antlr.v4.Tool;
import org.antlr.v4.parse.ANTLRParser;
import org.antlr.v4.tool.Grammar;
import org.antlr.v4.tool.ast.GrammarRootAST;
import org.apache.commons.io.IOUtils;
import org.netbeans.api.editor.EditorRegistry;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.netbeans.modules.editor.NbEditorUtilities;
import org.openide.awt.UndoRedo;
import org.openide.loaders.DataObject;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
		displayName = "#LBL_FileTypeG4_VISUAL",
		iconBase = "com/github/mcheung63/antlr.png",
		mimeType = "text/x-g4",
		persistenceType = TopComponent.PERSISTENCE_NEVER,
		preferredID = "FileTypeG4Visual",
		position = 2000
)
@Messages("LBL_FileTypeG4_VISUAL=Settings")
public final class FileTypeG4VisualElement extends JPanel implements MultiViewElement {

	public static HashMap<DataObject, File> maps = new HashMap<>();
	public static HashMap<DataObject, String> startRules = new HashMap<>();

	private FileTypeG4DataObject obj;
	private JToolBar toolbar = new JToolBar();
	private transient MultiViewElementCallback callback;
	String startRuleName;
	String grammarName;
	boolean showTokens = true;
	boolean diagnostics = true;
	boolean gui = true;
	boolean SLL = true;
	boolean trace = true;
	boolean printTree = true;
	String psFile = null;
	RealTimeComboModel realTimeComboModel = new RealTimeComboModel();
	Lookup lkp;

	public FileTypeG4VisualElement(Lookup lkp) {
		this.lkp = lkp;
		obj = lkp.lookup(FileTypeG4DataObject.class);
		assert obj != null;
		initComponents();
	}

	@Override
	public String getName() {
		return "FileTypeG4VisualElement";
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        settingPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        comboBox = new javax.swing.JComboBox<>();
        refreshRealTimeFileButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        startRuleComboBox = new javax.swing.JComboBox<>();
        refreshStartRuleButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(FileTypeG4VisualElement.class, "FileTypeG4VisualElement.jLabel2.text")); // NOI18N

        comboBox.setModel(realTimeComboModel);
        comboBox.setRenderer(new RealTimeComboRenderer());
        comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(refreshRealTimeFileButton, org.openide.util.NbBundle.getMessage(FileTypeG4VisualElement.class, "FileTypeG4VisualElement.refreshRealTimeFileButton.text")); // NOI18N
        refreshRealTimeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshRealTimeFileButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(FileTypeG4VisualElement.class, "FileTypeG4VisualElement.jLabel3.text")); // NOI18N

        startRuleComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                startRuleComboBoxItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(refreshStartRuleButton, org.openide.util.NbBundle.getMessage(FileTypeG4VisualElement.class, "FileTypeG4VisualElement.refreshStartRuleButton.text")); // NOI18N
        refreshStartRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshStartRuleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingPanelLayout = new javax.swing.GroupLayout(settingPanel);
        settingPanel.setLayout(settingPanelLayout);
        settingPanelLayout.setHorizontalGroup(
            settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(startRuleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(settingPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshRealTimeFileButton)
                    .addComponent(refreshStartRuleButton))
                .addContainerGap(282, Short.MAX_VALUE))
        );
        settingPanelLayout.setVerticalGroup(
            settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(refreshRealTimeFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(startRuleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshStartRuleButton))
                .addContainerGap(638, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(FileTypeG4VisualElement.class, "FileTypeG4VisualElement.settingPanel.TabConstraints.tabTitle"), settingPanel); // NOI18N

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshRealTimeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshRealTimeFileButtonActionPerformed

		initComboBox();
    }//GEN-LAST:event_refreshRealTimeFileButtonActionPerformed

    private void comboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxItemStateChanged
		if (evt.getStateChange() == ItemEvent.SELECTED) {
			DataObject dataObject = lkp.lookup(DataObject.class);
			File file = (File) evt.getItem();
			maps.put(dataObject, file);
			File currentFile = new File(lkp.lookup(DataObject.class).getPrimaryFile().getPath());
			NbPreferences.forModule(FileTypeG4VisualElement.class).put("file-" + currentFile.getAbsolutePath(), file.getAbsolutePath());
		}
    }//GEN-LAST:event_comboBoxItemStateChanged

    private void startRuleComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_startRuleComboBoxItemStateChanged
		if (evt.getStateChange() == ItemEvent.SELECTED) {
			DataObject dataObject = lkp.lookup(DataObject.class);
			String rule = (String) evt.getItem();
			startRules.put(dataObject, rule);

			File currentFile = new File(lkp.lookup(DataObject.class).getPrimaryFile().getPath());
			NbPreferences.forModule(FileTypeG4VisualElement.class).put("startRule-" + currentFile.getAbsolutePath(), rule);
		}
    }//GEN-LAST:event_startRuleComboBoxItemStateChanged

    private void refreshStartRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshStartRuleButtonActionPerformed
		initStartRuleCombo();
    }//GEN-LAST:event_refreshStartRuleButtonActionPerformed

	private void initComboBox() {
		synchronized (realTimeComboModel.files) {
			realTimeComboModel.files.clear();
			File currentFile = new File(lkp.lookup(DataObject.class).getPrimaryFile().getPath());
			String savedPath = NbPreferences.forModule(FileTypeG4VisualElement.class).get("file-" + currentFile.getAbsolutePath(), null);

			Set<TopComponent> comps = TopComponent.getRegistry().getOpened();
			boolean bingo = false;
			File selectedFile = null;
			for (TopComponent tc : comps) {
				Node[] arr = tc.getActivatedNodes();
				if (arr != null) {
					for (int j = 0; j < arr.length; j++) {
						DataObject dataObject = (DataObject) arr[j].getCookie(DataObject.class);
						File file = new File(dataObject.getPrimaryFile().getPath());
						if (file.exists() && file.isFile() && !file.equals(currentFile)) {
							realTimeComboModel.files.add(file);
							if (file.getAbsolutePath().equals(savedPath)) {
								selectedFile = file;
								bingo = true;
							}
						}
					}
				}
			}
			if (!bingo && savedPath != null) {
				selectedFile = new File(savedPath);
				realTimeComboModel.files.add(selectedFile);
			}
			comboBox.setSelectedItem(selectedFile);
		}

		comboBox.setRenderer(new RealTimeComboRenderer()); // if no this line, combobox will show nothing after refeshing with few files
	}

	private void initStartRuleCombo() {
		try {
			ModuleLib.log("initStartRuleCombo");
			DataObject dataObject = lkp.lookup(DataObject.class);
			String content = IOUtils.toString(new FileReader(new File(dataObject.getPrimaryFile().getPath())));
			Tool tool = new Tool();
			GrammarRootAST ast = tool.parseGrammarFromString(content);
			startRuleComboBox.removeAllItems();

			boolean bingo = false;
			File currentFile = new File(lkp.lookup(DataObject.class).getPrimaryFile().getPath());
			String startRule = NbPreferences.forModule(FileTypeG4VisualElement.class).get("startRule-" + currentFile.getAbsolutePath(), null);
			ModuleLib.log("startRule=" + startRule);
			if (ast.grammarType == ANTLRParser.COMBINED) {
				Grammar grammar = tool.createGrammar(ast);
				tool.process(grammar, false);
				for (String rule : grammar.getRuleNames()) {
					startRuleComboBox.addItem(rule);
					if (rule.equals(startRule)) {
						startRule = rule;
						bingo = true;
					}
				}
			}

			if (!bingo && startRule != null) {
				startRuleComboBox.addItem(startRule);
			}
			startRuleComboBox.setSelectedItem(startRule);
		} catch (FileNotFoundException ex) {
			Exceptions.printStackTrace(ex);
		} catch (IOException ex) {
			Exceptions.printStackTrace(ex);
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton refreshRealTimeFileButton;
    private javax.swing.JButton refreshStartRuleButton;
    private javax.swing.JPanel settingPanel;
    private javax.swing.JComboBox<String> startRuleComboBox;
    // End of variables declaration//GEN-END:variables

	@Override
	public JComponent getVisualRepresentation() {
		return this;
	}

	@Override
	public JComponent getToolbarRepresentation() {
		return toolbar;
	}

	@Override
	public Action[] getActions() {
		return new Action[0];
	}

	@Override
	public Lookup getLookup() {
		return obj.getLookup();
	}

	@Override
	public void componentOpened() {
	}

	@Override
	public void componentClosed() {
	}

	@Override
	public void componentShowing() {
		refreshRealTimeFileButtonActionPerformed(null);
		refreshStartRuleButtonActionPerformed(null);
	}

	@Override
	public void componentHidden() {
	}

	@Override
	public void componentActivated() {
	}

	@Override
	public void componentDeactivated() {
	}

	@Override
	public UndoRedo getUndoRedo() {
		return UndoRedo.NONE;
	}

	@Override
	public void setMultiViewCallback(MultiViewElementCallback callback) {
		this.callback = callback;
	}

	@Override
	public CloseOperationState canCloseElement() {
		return CloseOperationState.STATE_OK;
	}

}
