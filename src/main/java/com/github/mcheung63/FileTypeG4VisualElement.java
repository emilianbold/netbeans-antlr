/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.mcheung63;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import org.antlr.v4.runtime.ParserRuleContext;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.snt.inmemantlr.GenericParser;
import org.snt.inmemantlr.listener.DefaultTreeListener;
import org.snt.inmemantlr.tree.Ast;
import org.snt.inmemantlr.utils.FileUtils;

@MultiViewElement.Registration(
		displayName = "#LBL_FileTypeG4_VISUAL",
		iconBase = "com/github/mcheung63/antlr.png",
		mimeType = "text/x-g4",
		persistenceType = TopComponent.PERSISTENCE_NEVER,
		preferredID = "FileTypeG4Visual",
		position = 2000
)
@Messages("LBL_FileTypeG4_VISUAL=Visual")
public final class FileTypeG4VisualElement extends JPanel implements MultiViewElement {

	private FileTypeG4DataObject obj;
	private JToolBar toolbar = new JToolBar();
	private transient MultiViewElementCallback callback;

	public FileTypeG4VisualElement(Lookup lkp) {
		obj = lkp.lookup(FileTypeG4DataObject.class);
		assert obj != null;
		initComponents();
	}

	@Override
	public String getName() {
		return "FileTypeG4VisualElement";
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        treePanel = new javax.swing.JPanel();
        refreshTreeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        grammarTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ruleTextField = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        refreshTreeButton.setLabel(org.openide.util.NbBundle.getMessage(FileTypeG4VisualElement.class, "FileTypeG4VisualElement.refreshTreeButton.label")); // NOI18N
        refreshTreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTreeButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FileTypeG4VisualElement.class, "FileTypeG4VisualElement.jLabel1.text")); // NOI18N

        grammarTextField.setText(org.openide.util.NbBundle.getMessage(FileTypeG4VisualElement.class, "FileTypeG4VisualElement.grammarTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(FileTypeG4VisualElement.class, "FileTypeG4VisualElement.jLabel2.text")); // NOI18N
        jLabel2.setToolTipText(org.openide.util.NbBundle.getMessage(FileTypeG4VisualElement.class, "FileTypeG4VisualElement.jLabel2.toolTipText")); // NOI18N

        ruleTextField.setText(org.openide.util.NbBundle.getMessage(FileTypeG4VisualElement.class, "FileTypeG4VisualElement.ruleTextField.text")); // NOI18N

        javax.swing.GroupLayout treePanelLayout = new javax.swing.GroupLayout(treePanel);
        treePanel.setLayout(treePanelLayout);
        treePanelLayout.setHorizontalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refreshTreeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(grammarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ruleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(244, Short.MAX_VALUE))
        );
        treePanelLayout.setVerticalGroup(
            treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(treePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshTreeButton)
                    .addComponent(jLabel1)
                    .addComponent(grammarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(ruleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(714, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(FileTypeG4VisualElement.class, "FileTypeG4VisualElement.treePanel.TabConstraints.tabTitle"), treePanel); // NOI18N

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshTreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTreeButtonActionPerformed
		String base = "/Users/peter/Desktop";
		new File(base + "/temp").delete();
		new File(base + "/temp").mkdir();
		File file = new File(obj.getPrimaryFile().getPath());
		try {
			Files.copy(file.toPath(), new File(base + "/temp/" + file.getName()).toPath());
		} catch (IOException ex) {
			ModuleLib.log("exception=" + ModuleLib.printException(ex));
		}
		try {
			File f = new File(base + "/temp/" + file.getName());
			GenericParser gp = new GenericParser(f);
			String s = FileUtils.loadFileContent("HelloWorld.java");

			DefaultTreeListener dlist = new DefaultTreeListener();

			gp.setListener(dlist);
			gp.compile();

			ParserRuleContext ctx = gp.parse(s);

			Ast ast = dlist.getAst();
			ModuleLib.log(ast.toDot());
		} catch (Exception ex) {
			ModuleLib.log("exception=" + ModuleLib.printException(ex));
		}
    }//GEN-LAST:event_refreshTreeButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField grammarTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton refreshTreeButton;
    private javax.swing.JTextField ruleTextField;
    private javax.swing.JPanel treePanel;
    // End of variables declaration//GEN-END:variables

	@Override
	public JComponent getVisualRepresentation() {
		return this;
	}

	@Override
	public JComponent getToolbarRepresentation() {
		return toolbar;
	}

	@Override
	public Action[] getActions() {
		return new Action[0];
	}

	@Override
	public Lookup getLookup() {
		return obj.getLookup();
	}

	@Override
	public void componentOpened() {
	}

	@Override
	public void componentClosed() {
	}

	@Override
	public void componentShowing() {
	}

	@Override
	public void componentHidden() {
	}

	@Override
	public void componentActivated() {
	}

	@Override
	public void componentDeactivated() {
	}

	@Override
	public UndoRedo getUndoRedo() {
		return UndoRedo.NONE;
	}

	@Override
	public void setMultiViewCallback(MultiViewElementCallback callback) {
		this.callback = callback;
	}

	@Override
	public CloseOperationState canCloseElement() {
		return CloseOperationState.STATE_OK;
	}

}
